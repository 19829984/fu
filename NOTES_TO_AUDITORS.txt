I need help writing a bounded invariant test for the token as a whole

While ReflectMath.t.sol thoroughly tests the various functions in ReflectMath, the overall transfer
logic has crucial components that are implemented in FU. This reduces confidence that the actual
transfer logic/math is correct.

Probably the biggest opportunity for bugs is in corrupting various data structures (the rebase queue
circular linked list; the list of voting snapshots) as well as failing to keep `_totalShares`
correctly synchronized.

The fact that `pair` and `DEAD` are special-cased and that ERC20 requires that `transferFrom(...,
0)` is a no-op that still emits an event leads to a proliferation of edge cases.

I probably haven't thoroughly tested the zero `amount` case.

I probably haven't tested the extrema of balances enough. E.g. what happens if from and to are both
above the whale limit? Or when buying 75% of the supply from `pair`

The code that handles rounding error in `ReflectMath` is _really_ inefficient. Is there a better way
to handle this? Is my implementation of the reflection arithmetic faulty?

I may have missed using `unchecked` some places where it really ought to be.

In the fallback function (that donates ETH to the pair), should I check that `address(0)` owns a
supermajority of the LP? If so, what is the threshold whereupon a sandwich attack becomes
potentially profitable?

Invariant testing:
  * on `transfer{,From}`:
    * blacklisted addresses
      * never possible to transfer to/from the dead address
      * not possible to transfer to self (from)
      * not possible to transfer to token
      * not possible to transfer to efficient addresses
    * atomicity (not returning false after doing a state mutation)
    * `from`'s balance decreases by exactly `amount`
      * whale limit
        * pair
    * `to`'s balance increases by `amount * (1 - fee)` (and crazy balance scaling factor)
      * whale limit
        * pair
    * all other accounts' balances are nondecreasing
      * whale limit
        * pair
    * rebase queue
      * rebase queue event exactly reflects the balances of the accounts that it touches

  * `totalSupply`
    * lower bounded (inclusive) by scaling up the balance of each address according to the crazy balance rule
    * upper bounded (exclusive) by adding one to each balance and then scaling up according to the crazy balance rule

  * `*From` check allowance
    * Permit2 special case
    * transient allowance special case

  * `permit`
  * `delegateBySig`

  * on `burn{,From}`
    * only `from`'s balance decreases

  * `balanceOf(...)` cannot return zero while the corresponding shares slot is nonzero
